# -*- coding: utf-8 -*-
"""Mini-ETL-Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QFFBo-dMfbsYmd4DSArvD4dda6VrY8di
"""

# اختياري: PostgreSQL
# !pip -q install sqlalchemy psycopg2-binary
import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime
from pathlib import Path
print('Ready ✓')

raw_rows = [
    [1,  "2025-08-31", " Phone  X  ", "2,499.00",  "1",   "Riyadh", "C001"],
    [2,  "2025/08/31", "Headphones",  "399.99",    "2",   "Jeddah", "C002"],
    [3,  "31-08-2025", "Charger",     "89.5 SAR",  "3",   "Taif",   "C003"],
    [4,  "2025-09-01", "Phone X",     "2499",      "one", "Riyadh", "C001"],
    [5,  "2025-09-01", "Cable",       "29.90",     "",    "Jazan",  "C004"],
    [6,  "2025-09-01", "Screen",      "1,099.00",  "1",   "Abha",   "C005"],
    [7,  "2025-09-02", "Phone X",     "2499.00",   "1",   "Riyadh", "C006"],
    [8,  "2025-09-02", "Headphones",  "N/A",       "2",   "Jeddah", "C007"],
    [9,  "2025-09-02", "Charger",     "89.50",     "2",   "Taif",   "C008"],
    [10, "2025-09-03", "Cable",       "29.90",     "2",   "Jazan",  "C009"],
    [11, "invalid",     "Cable",       "29.90",     "2",   "Jazan",  "C009"],
    [12, "2025-09-03", "Screen",      "1099.00",   "1",   "Abha",   "C010"],
    [13, "2025-09-03", "Phone X",     "2,499.00 SAR","1", "Riyadh", "C011"],
    [14, "2025-09-03", " Charger",    "89.50",     " -1 ","Taif",   "C012"],
    [15, "2025-09-03", "Cable",       None,         "1",   "Jazan",  "C013"],
]
import pandas as pd
raw_df = pd.DataFrame(raw_rows, columns=["order_id","date","product","price","quantity","city","customer_id"])
raw_df.to_csv("sales_data.csv", index=False)
print('تم إنشاء الملف التجريبي: sales_data.csv')
raw_df.head()

from datetime import datetime
import pandas as pd
import numpy as np

def try_parse_date(s: str):
    """يحاول قراءة التاريخ بعدة صيغ، وإذا فشل يرجع NaT."""
    if not isinstance(s, str):
        return pd.NaT
    for fmt in ("%Y-%m-%d", "%Y/%m/%d", "%d-%m-%Y"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            pass
    return pd.NaT

def clean_transform(df: pd.DataFrame) -> pd.DataFrame:
    """تنظيف وتحويل بيانات المبيعات."""
    df = df.copy()
    # تنظيف النصوص
    for col in ["product", "city", "customer_id"]:
        df[col] = df[col].astype(str).str.strip()

    df["product"] = (
        df["product"]
        .str.replace(r"\s+", " ", regex=True)
        .str.replace(r"(?i)^phone\s*x$", "Phone X", regex=True)
        .str.replace(r"(?i)^charger$", "Charger", regex=True)
        .str.replace(r"(?i)^cable$", "Cable", regex=True)
        .str.replace(r"(?i)^screen$", "Screen", regex=True)
    )

    # أسعار: إزالة الرموز والفواصل وتحويل لأرقام
    df["price"] = (
        df["price"].astype(str)
        .str.replace(r"[^\d\.\,]", "", regex=True)
        .str.replace(",", "", regex=False)
        .replace({"": np.nan})
    )
    df["price"] = pd.to_numeric(df["price"], errors="coerce")

    # كميات: تحويل نصوص غامضة لأرقام
    df["quantity"] = df["quantity"].astype(str).str.strip()
    df.loc[df["quantity"].str.lower() == "one", "quantity"] = "1"
    df["quantity"] = pd.to_numeric(df["quantity"], errors="coerce")

    # تواريخ
    df["date"] = df["date"].apply(try_parse_date)

    # إزالة صفوف غير الصالحة
    df = df.dropna(subset=["price", "quantity", "date"])
    df = df[(df["price"] > 0) & (df["quantity"] > 0)]

    # مشتقات
    df["revenue"] = df["price"] * df["quantity"]
    if "order_id" in df.columns:
        df = df.sort_values(["order_id"]).drop_duplicates(subset=["order_id"], keep="last")
    df["year"] = pd.to_datetime(df["date"]).dt.year
    df["month"] = pd.to_datetime(df["date"]).dt.month
    return df

def summarize(df: pd.DataFrame) -> pd.DataFrame:
    return pd.DataFrame({
        "rows": [len(df)],
        "total_revenue": [round(df.get("revenue", pd.Series(dtype=float)).sum(), 2)],
        "first_date": [str(pd.to_datetime(df["date"]).min().date()) if len(df) else None],
        "last_date": [str(pd.to_datetime(df["date"]).max().date()) if len(df) else None],
    })

conn = sqlite3.connect("sales.db")
df.to_sql("sales_clean", conn, if_exists="replace", index=False)
conn.close()
print("✅ تم تخزين البيانات في قاعدة SQLite باسم sales.db ✓")

CSV_PATH = 'sales_data.csv'

raw = pd.read_csv(CSV_PATH, dtype=str)
print('شكل البيانات الخام:', raw.shape)
display(raw.head())

clean = clean_transform(raw)
print('شكل البيانات بعد التنظيف:', clean.shape)
display(clean.head())
display(summarize(clean))

# حفظ مخرجات التنظيف
clean.to_csv('sales_clean.csv', index=False)
print('تم حفظ: sales_clean.csv')

conn = sqlite3.connect('sales.db')
clean.to_sql('sales_clean', conn, if_exists='replace', index=False)
print('تم إنشاء قاعدة البيانات: sales.db و جدول: sales_clean')

check = pd.read_sql_query('''
SELECT COUNT(*) AS rows_in_table,
       ROUND(SUM(revenue), 2) AS total_revenue,
       MIN(date) AS first_date,
       MAX(date) AS last_date
FROM sales_clean
''', conn)
display(check)
conn.close()

# from sqlalchemy import create_engine
# engine = create_engine("postgresql+psycopg2://USER:PASS@HOST:5432/DBNAME")
# clean.to_sql('sales_clean', engine, if_exists='replace', index=False)
# print('تم الرفع إلى PostgreSQL ✓')

